{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CBZ\\\\Downloads\\\\Telegram Desktop\\\\hospitalproject\\\\hospitalproject\\\\frontend\\\\src\\\\routes\\\\Language.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport translateText from './Translate';\nimport './Language.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Language() {\n  _s();\n  const [inputText, setInputText] = useState('');\n  const [targetLanguage, setTargetLanguage] = useState('es'); // Default: Spanish\n\n  const handleTranslate = async () => {\n    if (inputText) {\n      const translatedText = await translateText(inputText, targetLanguage);\n      // Do something with the translatedText, e.g., display it on the page.\n    }\n  };\n  const handleLanguageSelect = async () => {\n    if (inputText) {\n      const translatedText = await translateText(inputText, targetLanguage);\n      // Do something with the translatedText, e.g., display it on the page.\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \".select-container\",\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      value: targetLanguage,\n      onChange: e => setTargetLanguage(e.target.value),\n      onClick: handleLanguageSelect,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"en\",\n        children: \"  English\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"om\",\n        children: \"Afan Oromo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"am\",\n        children: \"Amharic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(Language, \"K18AvljQDXM5of7IytOGGQ3S/yw=\");\n_c = Language;\nexport default Language;\nvar _c;\n$RefreshReg$(_c, \"Language\");","map":{"version":3,"names":["React","useState","translateText","jsxDEV","_jsxDEV","Language","_s","inputText","setInputText","targetLanguage","setTargetLanguage","handleTranslate","translatedText","handleLanguageSelect","className","children","value","onChange","e","target","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/CBZ/Downloads/Telegram Desktop/hospitalproject/hospitalproject/frontend/src/routes/Language.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport translateText from './Translate';\r\nimport './Language.css';\r\n\r\nfunction Language() {\r\n  const [inputText, setInputText] = useState('');\r\n  const [targetLanguage, setTargetLanguage] = useState('es'); // Default: Spanish\r\n\r\n  const handleTranslate = async () => {\r\n    if (inputText) {\r\n      const translatedText = await translateText(inputText, targetLanguage);\r\n      // Do something with the translatedText, e.g., display it on the page.\r\n    }\r\n  };\r\n\r\n  const handleLanguageSelect = async () => {\r\n    if (inputText) {\r\n      const translatedText = await translateText(inputText, targetLanguage);\r\n      // Do something with the translatedText, e.g., display it on the page.\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='.select-container'>\r\n      <select\r\n        value={targetLanguage}\r\n        onChange={(e) => setTargetLanguage(e.target.value)}\r\n        onClick={handleLanguageSelect}\r\n      >\r\n        <option value=\"en\">  English</option>\r\n        <option value=\"om\">Afan Oromo</option>\r\n        <option value=\"am\">Amharic</option>\r\n        {/* Add more language options */}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Language;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,aAAa,MAAM,aAAa;AACvC,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE5D,MAAMU,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAIJ,SAAS,EAAE;MACb,MAAMK,cAAc,GAAG,MAAMV,aAAa,CAACK,SAAS,EAAEE,cAAc,CAAC;MACrE;IACF;EACF,CAAC;EAED,MAAMI,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAIN,SAAS,EAAE;MACb,MAAMK,cAAc,GAAG,MAAMV,aAAa,CAACK,SAAS,EAAEE,cAAc,CAAC;MACrE;IACF;EACF,CAAC;EAED,oBACEL,OAAA;IAAKU,SAAS,EAAC,mBAAmB;IAAAC,QAAA,eAChCX,OAAA;MACEY,KAAK,EAAEP,cAAe;MACtBQ,QAAQ,EAAGC,CAAC,IAAKR,iBAAiB,CAACQ,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MACnDI,OAAO,EAAEP,oBAAqB;MAAAE,QAAA,gBAE9BX,OAAA;QAAQY,KAAK,EAAC,IAAI;QAAAD,QAAA,EAAC;MAAS;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrCpB,OAAA;QAAQY,KAAK,EAAC,IAAI;QAAAD,QAAA,EAAC;MAAU;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACtCpB,OAAA;QAAQY,KAAK,EAAC,IAAI;QAAAD,QAAA,EAAC;MAAO;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE7B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAClB,EAAA,CAhCQD,QAAQ;AAAAoB,EAAA,GAARpB,QAAQ;AAkCjB,eAAeA,QAAQ;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}